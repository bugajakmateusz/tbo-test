name: CI/CD Pipeline
permissions:
  contents: write
  actions: write
  checks: write
  security-events: write   # To upload sarif files
  issues: write
  packages: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Build app
        run: DOCKER_BUILDKIT=1 docker build --platform=linux/amd64 --target prod_last -t debug -f ./docker/fpm/Dockerfile --compress .

      - name: Start application
        run: docker compose -f ./docker/compose/docker-compose-ci.yml up haproxy nginx fpm postgres postgres_test -d

      - name: Copy additional files
        run: |
          docker compose -f ./docker/compose/docker-compose-ci.yml cp .php-cs-fixer.dist.php fpm:/var/www/html/.php-cs-fixer.dist.php &&
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./phpstan.neon fpm:/var/www/html/phpstan.neon &&
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./phpstan-baseline.neon fpm:/var/www/html/phpstan-baseline.neon &&
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./phpunit.xml.dist fpm:/var/www/html/phpunit.xml.dist &&
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./tests fpm:/var/www/html/tests && 
          docker compose -f ./docker/compose/docker-compose-ci.yml cp .env.test fpm:/var/www/html/.env.test && 
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./packages/tests fpm:/var/www/html/packages/tests && 
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./packages/src/Faker fpm:/var/www/html/packages/src/Faker
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./resources/scripts/phpstan-cli-app.php fpm:/var/www/html/resources/scripts/phpstan-cli-app.php
          docker compose -f ./docker/compose/docker-compose-ci.yml exec --user=www-data fpm sh -c "mkdir -p /var/www/html/docker/db" &&
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./docker/db/wait-for-db.php fpm:/var/www/html/docker/db/wait-for-db.php &&
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./docker/fpm/default_php.ini fpm:/usr/local/etc/php/conf.d/z-99-prod-php.ini

      - name: Apply additional packages
        run: |
          docker compose -f ./docker/compose/docker-compose-ci.yml exec --user=www-data fpm sh -c "composer install --prefer-dist --no-interaction &&
                php docker/db/wait-for-db.php postgres polsl_dev &&
                APP_ENV=dev php vendor/bin/phinx migrate &&
                php docker/db/wait-for-db.php postgres_test polsl_test &&
                APP_ENV=test php vendor/bin/phinx migrate &&
                echo 'App is ready, head to http://localhost:3100'
          "

      - name: Run static analysis
        run: docker compose -f ./docker/compose/docker-compose-ci.yml exec --user=www-data fpm composer app:checks

      - name: Run tests
        run: docker compose -f ./docker/compose/docker-compose-ci.yml exec --user=www-data fpm vendor/bin/phpunit --log-junit phpunit-report.xml

      - name: Copy tests assets
        if: success() || failure() # always run even if the previous step fails
        run: docker compose -f ./docker/compose/docker-compose-ci.yml cp fpm:/var/www/html/phpunit-report.xml ./phpunit-report.xml

      - name: Publish test results
        uses: mikepenz/action-junit-report@v5
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/phpunit-report.xml'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/php@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --all-projects --fail-on=upgradable --sarif-file-output=snyk.sarif --org=${{ secrets.SNYK_ORG }}

      - name: Upload Snyk results
        if: success() || failure() # always run even if the previous step fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      - name: Semgrep check
        run: |
          pip3 install semgrep &&
          semgrep scan --config auto --error --output scan_results.sarif --sarif

      - name: Upload semgrep results
        if: success() || failure() # always run even if the previous step fails
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scan_results.sarif

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.sources=src,packages/src
            -Dsonar.tests=tests,packages/tests
            -Dsonar.php.tests.reportPath=phpunit-report.xml
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=1000

      - name: Copy public assets
        run: |
          docker compose -f ./docker/compose/docker-compose-ci.yml cp fpm:/var/www/html/public/ ./public_temp &&
          docker compose -f ./docker/compose/docker-compose-ci.yml cp ./public_temp/. nginx:/var/www/html/public/

      - name: ZAP Baseline Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'http://localhost:3100'
          rules_file_name: 'resources/zap/gen.conf'
          cmd_options: '-a -T 1'
          fail_action: true

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Determine tag
        id: tag
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "TAG=latest" >> $GITHUB_ENV
          else
            BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
            echo "TAG=beta-${BRANCH_NAME}" >> $GITHUB_ENV
          fi

      - name: Tag and push Docker image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}/app
          docker tag debug $IMAGE_NAME:${{ env.TAG }}
          docker push $IMAGE_NAME:${{ env.TAG }}

      - name: Stop containers
        if: always()
        run: docker compose down
