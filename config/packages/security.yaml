security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Tab\Infrastructure\Symfony\Security\SymfonyUser:
            algorithm: sodium
            time_cost: '%sodium_time_cost%'
            memory_cost: '%sodium_memory_cost_kilobytes%'

    # https://symfony.com/doc/current/security.html#hierarchical-roles
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER, ROLE_LOGISTIC_MANAGER, ROLE_OFFICE_MANAGER, ROLE_COURIER]
        ROLE_LOGISTIC_MANAGER: ROLE_USER
        ROLE_OFFICE_MANAGER: ROLE_USER
        ROLE_COURIER: ROLE_USER

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        db_provider:
            id: Tab\Infrastructure\Symfony\SymfonyUserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            user_checker: Tab\Infrastructure\Symfony\Security\SymfonyUserChecker
            entry_point: Tab\Infrastructure\Symfony\Security\SymfonyJsonAuthenticator
            provider: db_provider
            custom_authenticators:
                - Tab\Infrastructure\Symfony\Security\SymfonyJsonAuthenticator
            logout:
                invalidate_session: false
                path: api.logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login$, role: PUBLIC_ACCESS }
        - { path: ^/api/json-api/users, methods: [GET], role: ROLE_USER }
        - { path: ^/api/json-api/users, methods: [POST, PATCH], role: ROLE_ADMIN }
        - { path: ^/api/json-api/snacks, methods: [GET], role: [ROLE_OFFICE_MANAGER, ROLE_LOGISTIC_MANAGER, ROLE_COURIER] }
        - { path: ^/api/json-api/snacks, methods: [POST, PATCH], role: ROLE_OFFICE_MANAGER }
        - { path: ^/api/json-api/machines, methods: [GET], role: [ROLE_OFFICE_MANAGER, ROLE_LOGISTIC_MANAGER, ROLE_COURIER] }
        - { path: ^/api/json-api/machines, methods: [POST, PATCH], role: [ROLE_OFFICE_MANAGER] }
        - { path: ^/api/json-api/buys, methods: [POST], role: ROLE_LOGISTIC_MANAGER }
        - { path: ^/api/doc, role: PUBLIC_ACCESS }
        - { path: ^/api/, role: ROLE_USER }