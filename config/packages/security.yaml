security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Tab\Infrastructure\Symfony\Security\SymfonyUser:
            algorithm: sodium
            time_cost: '%sodium_time_cost%'
            memory_cost: '%sodium_memory_cost_kilobytes%'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        db_provider:
            id: Tab\Infrastructure\Symfony\SymfonyUserProvider
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            user_checker: Tab\Infrastructure\Symfony\Security\SymfonyUserChecker
            entry_point: Tab\Infrastructure\Symfony\Security\SymfonyJsonAuthenticator
            provider: db_provider
            custom_authenticators:
                - Tab\Infrastructure\Symfony\Security\SymfonyJsonAuthenticator
            logout:
                invalidate_session: false
                path: api.logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, role: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
